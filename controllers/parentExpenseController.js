// controllers/parentExpenseController.js

const mongoose = require("mongoose");
const ParentExpense = require("../models/ParentExpense");
const ChildExpense = require("../models/ChildExpense");

// API Controllers

// Th√™m m·ªõi b·∫£ng cha
const addParentExpense = async (req, res) => {
  try {
    const { ngayBatDau, ngayKetThuc } = req.body;

    // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
    if (!ngayBatDau) {
      return res.status(400).json({ message: "Ng√†y b·∫Øt ƒë·∫ßu l√† b·∫Øt bu·ªôc." });
    }

    const newParentExpense = new ParentExpense({
      ngayBatDau,
      ngayKetThuc,
      // Th√™m c√°c tr∆∞·ªùng kh√°c n·∫øu c·∫ßn
    });

    const savedParent = await newParentExpense.save();
    res.status(201).json(savedParent);
  } catch (error) {
    console.error("L·ªói khi th√™m b·∫£ng cha:", error.message);
    res.status(500).json({ message: "L·ªói khi th√™m b·∫£ng cha.", error: error.message });
  }
};

// L·∫•y danh s√°ch b·∫£ng cha
const getParentExpenses = async (req, res) => {
  try {
    const parents = await ParentExpense.find();
    res.status(200).json(parents);
  } catch (error) {
    console.error("L·ªói khi l·∫•y danh s√°ch b·∫£ng cha:", error.message);
    res.status(500).json({ message: "L·ªói khi l·∫•y danh s√°ch b·∫£ng cha.", error: error.message });
  }
};

// L·∫•y th√¥ng tin b·∫£ng cha theo ID (API)
const getParentExpenseById = async (req, res) => {
  try {
    const { id } = req.params;

    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({ message: "ID kh√¥ng h·ª£p l·ªá." });
    }

    const parent = await ParentExpense.findById(id);
    if (!parent) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b·∫£ng cha." });
    }

    res.json(parent);
  } catch (error) {
    console.error("L·ªói khi l·∫•y b·∫£ng cha:", error.message);
    res.status(500).json({ message: "L·ªói khi l·∫•y b·∫£ng cha.", error: error.message });
  }
};

// C·∫≠p nh·∫≠t b·∫£ng cha theo ID (API)
const updateParentExpense = async (req, res) => {
  try {
    const { id } = req.params;
    const { ngayBatDau, ngayKetThuc } = req.body;

    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({ message: "ID kh√¥ng h·ª£p l·ªá." });
    }

    const updatedParent = await ParentExpense.findByIdAndUpdate(
      id,
      { ngayBatDau, ngayKetThuc },
      { new: true }
    );

    if (!updatedParent) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b·∫£ng cha v·ªõi ID n√†y." });
    }

    res.status(200).json(updatedParent);
  } catch (error) {
    console.error("L·ªói khi c·∫≠p nh·∫≠t b·∫£ng cha:", error.message);
    res.status(500).json({ message: "L·ªói khi c·∫≠p nh·∫≠t b·∫£ng cha.", error: error.message });
  }
};

// X√≥a b·∫£ng cha theo ID (API)
const deleteParentExpense = async (req, res) => {
  try {
    const { id } = req.params;

    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({ message: "ID kh√¥ng h·ª£p l·ªá." });
    }

    const parentExpense = await ParentExpense.findById(id);
    if (!parentExpense) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b·∫£ng cha v·ªõi ID n√†y." });
    }

    // X√≥a t·∫•t c·∫£ chi ph√≠ con li√™n quan n·∫øu c·∫ßn
    await ChildExpense.deleteMany({ maChiPhi: id });

    // X√≥a b·∫£ng cha
    await ParentExpense.findByIdAndDelete(id);

    res.status(200).json({ message: "X√≥a b·∫£ng cha th√†nh c√¥ng." });
  } catch (error) {
    console.error("L·ªói khi x√≥a b·∫£ng cha:", error.message);
    res.status(500).json({ message: "L·ªói khi x√≥a b·∫£ng cha.", error: error.message });
  }
};

// View Controllers

// H√†m controller cho view read-only
const getReadOnlyParentWithChildren = async (req, res) => {
  try {
    const parentId = req.params.id;
    console.log('üöÄ Truy c·∫≠p route /view/:id v·ªõi ID:', parentId);

    // Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa ObjectId
    if (!mongoose.Types.ObjectId.isValid(parentId)) {
      console.log('‚ùå ID kh√¥ng h·ª£p l·ªá.');
      return res.status(400).send('ID b·∫£ng cha kh√¥ng h·ª£p l·ªá.');
    }

    // T√¨m b·∫£ng cha
    const parent = await ParentExpense.findById(parentId);
    if (!parent) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y b·∫£ng cha v·ªõi ID n√†y.');
      return res.status(404).send('Kh√¥ng t√¨m th·∫•y b·∫£ng cha v·ªõi ID n√†y.');
    }
    console.log('‚úÖ T√¨m th·∫•y b·∫£ng cha:', parent);

    // T√¨m c√°c b·∫£ng con li√™n quan
    const children = await ChildExpense.find({ maChiPhi: parentId });
    console.log(`‚úÖ T√¨m th·∫•y ${children.length} chi ph√≠ con.`);

    // X√°c ƒë·ªãnh baseUrl
    const baseUrl = `${req.protocol}://${req.get('host')}`;

    // Render view read-only
    res.render('parentReadOnlyView', { parent, children, baseUrl });
  } catch (error) {
    console.error('‚ùå L·ªói khi l·∫•y b·∫£ng cha v√† b·∫£ng con:', error);
    res.status(500).send('ƒê√£ x·∫£y ra l·ªói tr√™n server.');
  }
};

// H√†m controller cho view ch·ªânh s·ª≠a (Edit View)
const getParentWithChildren = async (req, res) => {
  try {
    const parentId = req.params.id;
    console.log('üöÄ Truy c·∫≠p route /edit/:id v·ªõi ID:', parentId);

    // Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa ObjectId
    if (!mongoose.Types.ObjectId.isValid(parentId)) {
      console.log('‚ùå ID kh√¥ng h·ª£p l·ªá.');
      return res.status(400).send('ID b·∫£ng cha kh√¥ng h·ª£p l·ªá.');
    }

    // T√¨m b·∫£ng cha
    const parent = await ParentExpense.findById(parentId);
    if (!parent) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y b·∫£ng cha v·ªõi ID n√†y.');
      return res.status(404).send('Kh√¥ng t√¨m th·∫•y b·∫£ng cha v·ªõi ID n√†y.');
    }
    console.log('‚úÖ T√¨m th·∫•y b·∫£ng cha:', parent);

    // T√¨m c√°c b·∫£ng con li√™n quan
    const children = await ChildExpense.find({ maChiPhi: parentId });
    console.log(`‚úÖ T√¨m th·∫•y ${children.length} chi ph√≠ con.`);

    // Render view ch·ªânh s·ª≠a
    res.render('parentView', { parent, children });
  } catch (error) {
    console.error('‚ùå L·ªói khi l·∫•y b·∫£ng cha v√† b·∫£ng con:', error);
    res.status(500).send('ƒê√£ x·∫£y ra l·ªói tr√™n server.');
  }
};

module.exports = {
  addParentExpense,
  getParentExpenses,
  getParentExpenseById,
  updateParentExpense,
  deleteParentExpense,
  getReadOnlyParentWithChildren,
  getParentWithChildren,
};
